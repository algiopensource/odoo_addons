-
  I check all ir.rule
-
  !python {model: ir.rule}: |
    ignored_models = ['hr.expense.report', 'report.stock.inventory',
                      'board.board', 'ir.needaction_mixin', 'mail.favorite',
                      'mail.thread', 'mail.vote']
    domain = [('domain_force', '!=', False)]
    fields_to_read = ['name', 'domain_force', 'domain']
    try:
      if 'env' not in self.__dict__:
        raise ImportError
      rule_domains = self.search_read(domain, fields_to_read)
      if 'domain' not in self._fields:
        eval_context = self._eval_context()
        for rule_info in rule_domains:
          domain_force = rule_info['domain_force'] or '[]'
          rule_info['domain'] = eval(compile(
            domain_force.strip(), '', mode='eval'), eval_context)
    except ImportError:
      rule_ids = self.search(cr, uid, domain, context)
      rule_domains = self.read(cr, uid, rule_ids, fields_to_read, context)
    errors = []
    for rule_info in rule_domains:
      expr_nb = 0
      operator_nb = 0
      for part in rule_info['domain']:
        if part == '!':
          continue
        elif part in ('&', '|'):
          operator_nb += 1
        else:
          expr_nb += 1
      if rule_info and (expr_nb - operator_nb) != 1:
        errors.append((rule_info['name'], rule_info['domain_force'],
                       expr_nb, operator_nb))
    if errors:
      err_details = "\n".join([
        "%s: %s - %s/%s" % rule_infos for rule_infos in errors])
      raise Exception('Check theses ir.rule:\n%s' % err_details)
