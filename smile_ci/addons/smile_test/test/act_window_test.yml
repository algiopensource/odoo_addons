-
  I test all search and first reads for all act_windows
-
  !python {model: ir.actions.act_window}: |
    import time
    import datetime
    from dateutil.relativedelta import relativedelta

    errors = []
    # Ignore buggy models from server and official addons
    ignored_act_windows = [('Bill Payment', 'account.voucher'),
                           ('Customer Payment', 'account.voucher'),
                           ('Inventory Analysis', 'report.stock.inventory'),
                           ('Window Actions', 'ir.actions.act_window'),
                           ('Expenses Analysis', 'hr.expense.report'),
                           ('Reports', 'ir.actions.report.xml'),
                           ('Builds', 'scm.repository.branch.build'),
                           ('Branches', 'scm.repository.branch'),]
    # Only test act_window from menus: others might require active_ids
    try:
      if 'env' not in self.__dict__:
        raise ImportError
      menu_infos = self.env['ir.ui.menu'].search_read([], ['action'])
      cr, uid, context = self.env.args
      user = self.env.user
      user_context = self.env['res.users'].context_get()
    except ImportError:
      menu_ids = self.pool.get('ir.ui.menu').search(cr, uid, [], context=context)
      menu_infos = self.pool.get('ir.ui.menu').read(cr, uid, menu_ids, ['action'], context)
      user = self.pool.get('res.users').browse(cr, uid, uid)
      user_context = self.pool.get('res.users').context_get(cr, uid, context)
    actions = [info['action'].split(',') for info in menu_infos if info['action']]
    act_window_ids = list(set([int(res_id) for model, res_id in actions if model == 'ir.actions.act_window']))
    # context built as in webclient
    user_context.update({
      'active_model': '',
      'active_id': False,
      'active_ids': [],
      'uid': uid,
      'user': user,
      'time': time,
      'datetime': datetime,
      'relativedelta': relativedelta,
      'current_date': time.strftime('%Y-%m-%d'),
    })
    try:
      if 'env' not in self.__dict__:
        raise ImportError
      act_windows = self.browse(act_window_ids)
    except ImportError:
      act_windows = self.browse(cr, uid, act_window_ids, context)
    for act_window in act_windows:
      model = act_window.res_model
      if model == 'board.board':
        # Ignore special case of board.board
        continue
      if (act_window.name, model) in ignored_act_windows:
        # Ignore buggy models from server and official addons
        continue
      buf_context = user_context.copy()
      cr.execute('SAVEPOINT general_act_window_test')
      try:
        test_context = eval(act_window.context and act_window.context.strip() or '{}', buf_context) or buf_context
        test_domain = eval(act_window.domain and act_window.domain.strip() or '[]', buf_context) or []
        test_limit = int(act_window.limit) if act_window.limit else None
        try:
          if 'env' not in self.__dict__:
            raise ImportError
          self.env[model].with_context(**test_context).search_read(test_domain, offset=0, limit=test_limit)
        except ImportError:
          test_ids = self.pool.get(model).search(cr, uid, test_domain, offset=0, limit=test_limit, order=None, context=test_context, count=False)
          self.pool.get(model).read(cr, uid, test_ids, [], test_context)
      except Exception as e:
        err_info = (act_window.name, act_window.res_model, act_window.domain, act_window.limit, act_window.context, repr(e))
        errors.append(err_info)
        cr.execute('ROLLBACK TO general_act_window_test')
    if errors:
      err_details = "\n".join(["(%s, %s, %s, %s, %s): %s" % (act_window, model, domain, limit, context, err) for act_window, model, domain, limit, context, err in errors])
      raise Exception('Error in search/read for act_window/model and error:\n%s' % err_details)
