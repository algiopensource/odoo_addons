-
  I test all search and reads
-
  !python {model: ir.model}: |
    errors = []
    # Ignore buggy models from server and official addons: bug #1175984 in launchpad
    ignored_models = ['hr.expense.report', 'report.stock.inventory', 'board.board',
                     'ir.needaction_mixin', 'mail.favorite', 'mail.thread', 'mail.vote',
                     'ir.config_parameter', 'ir.server.object.lines', 'res.widget.user',
                     'workflow.triggers', 'report.stock.lines.date', 'oo.config',
                     'base.module.upgrade', 'report.stock.move', 'stock.report.prodlots',
                     'edi.edi', 'timesheet.report', 'ir.translation', 'report.document.user',
                     'account.bank.accounts.wizard', 'wizard.multi.charts.accounts',
                     'account.treasury.report', 'base.language.install', 'ir.actions.report.xml',
                     'mail.compose.message']
    domain = [('model', 'not in', ignored_models)]
    try:
      if 'env' not in self.__dict__:
        raise ImportError
      models = self.search(domain)
      cr = self._cr
      registry = self.env
    except ImportError:
      model_ids = self.search(cr, uid, domain, context=context)
      models = self.browse(cr, uid, model_ids, context)
      registry = self.pool
    for model in models:
      RecordModel = registry[model.model]
      if not getattr(RecordModel, '_auto', True):  # Exclude abstract models
        continue
      cr.execute('SAVEPOINT general_read_test')
      try:
        try:
          if 'env' not in self.__dict__:
            raise ImportError
          test_type = 'count'
          if self.search_count([]):
            test_type = 'search_limit'
            record = RecordModel.search([], limit=1)
            res_id = record.id
            test_type = 'read_one'
            res_infos = record.read()
            test_type = 'search_all'
            records = RecordModel.search([])
            res_ids = records.ids
            test_type = 'read_all'
            res_infos = records.read()
            if RecordModel._transient:
              continue
            test_type = 'name_get'
            res_infos = records.name_get()
        except ImportError:
          test_type = 'count'
          if RecordModel.search(cr, uid, [], context=context, count=True):
            test_type = 'search_limit'
            res_id = RecordModel.search(cr, uid, [], limit=1, context=context)
            test_type = 'read_one'
            res_infos = RecordModel.read(cr, uid, res_id, [], context)
            test_type = 'search_all'
            res_ids = RecordModel.search(cr, uid, [], context=context)
            test_type = 'read_all'
            res_infos = RecordModel.read(cr, uid, res_ids, [], context)
            classname = RecordModel.__class__.__name__
            if 'TransientModel' in classname or 'orm_memory' in classname:
               continue
            test_type = 'name_get'
            res_infos = RecordModel.name_get(cr, uid, res_ids, context)
      except Exception as e:
        err_info = (model.model, test_type, repr(e))
        errors.append(err_info)
        cr.execute('ROLLBACK TO general_read_test')
    if errors:
      err_details = "\n".join(["(%s, %s): %s" % (model, view_type, err) for model, view_type, err in errors])
      raise Exception('Error in search/read for model/test and error:\n%s' % err_details)
